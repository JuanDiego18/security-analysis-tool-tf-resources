# This is a basic GitHub Actions pipeline to validate Terraform
name: SAT Azure Workspace Deployment

on:
  pull_request:
    branches: [ main ]
  pull_request_target:
    types:
      - closed


env:
  BACKEND_RG_NAME: ${{ secrets.BACKEND_RG_NAME }}
  BACKEND_SA_NAME: ${{ secrets.BACKEND_SA_NAME }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  BACKEND_KEY: ${{ secrets.BACKEND_KEY }}


  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

  DATABRICKS_ACCOUNT_ID: ${{ secrets.DATABRICKS_ACCOUNT_ID }}
  DATABRICKS_ACCOUNT_HOST: ${{ secrets.DATABRICKS_ACCOUNT_HOST }}
  DATABRICKS_SP_CLIENT_ID: ${{ secrets.DATABRICKS_SP_CLIENT_ID }}
  DATABRICKS_SP_CLIENT_SECRET: ${{ secrets.DATABRICKS_SP_CLIENT_SECRET }}

  ROOT_DIR: ${{ github.workspace }}
  TF_SOURCE_REPO: JuanDiego18/security-analysis-tool-tf-resources

jobs:
  deploy:
    name: Terraform -> Azure Workspace Deployment

    if: github.event_name == 'pull_request' && github.event.action == 'opened'

    environment: Azure

    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    defaults:
      run:
        working-directory: terraform/azure/az-databricks-basic

    outputs:
      databricks_workspace_host: ${{ steps.terraform-outputs.outputs.databricks_workspace_host }}
      databricks_workspace_id: ${{ steps.terraform-outputs.outputs.databricks_workspace_id }}
      databricks_workspace_pat: ${{ steps.terraform-outputs.outputs.databricks_workspace_pat }}

    steps:
      - name: Checkout Workspace Terraform code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TF_SOURCE_REPO }}

      - name: Azure Authentication
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set execute permissions
        run: chmod +x ws_tf_actions.sh

      - name: Terraform Init
        id: init
        run: ./ws_tf_actions.sh init

      - name: Terraform Validate
        id: validate
        run: ./ws_tf_actions.sh validate

      - name: Terraform Plan
        id: plan
        run: ./ws_tf_actions.sh plan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: ./ws_tf_actions.sh apply
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1

      - name: Set Terraform Outputs
        id: terraform-outputs
        run: |
          echo "databricks_workspace_host=$(terraform output -raw databricks_workpace_host)" >> "$GITHUB_OUTPUT"
          echo "databricks_workspace_id=$(terraform output -raw databricks_workspace_id)"  >> "$GITHUB_OUTPUT"
          echo "databricks_workspace_pat=$(terraform output -raw databricks_workspace_pat)" >> "$GITHUB_OUTPUT"

      - name: Success
        if: steps.apply.outcome == 'success'
        run: echo "Workspace Deployment Successful"



  destroy:
    name: Terraform -> Azure Workspace Destroy

    if: github.event.action == 'closed' && github.event.pull_request.merged == true

    environment: Azure

    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    defaults:
      run:
        working-directory: terraform/azure/az-databricks-basic

    steps:
      - name: Checkout Workspace Terraform code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TF_SOURCE_REPO }}

      - name: Azure Authentication
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Set execute permissions
        run: chmod +x ws_tf_actions.sh

      - name: Terraform Init
        id: init
        run: ./ws_tf_actions.sh init

      - name: Terraform Validate
        id: validate
        run: ./ws_tf_actions.sh validate

      - name: Terraform Destroy
        id: destroy
        run: ./ws_tf_actions.sh destroy
        continue-on-error: true

      - name: Terraform Destoy Status
        if: steps.destroy.outcome == 'failure'
        run: exit 1

      - name: Success
        if: steps.destroy.outcome == 'success'
        run: echo "Workspace Destroyed Successfully"
